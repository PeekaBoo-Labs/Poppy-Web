'use client'

import NavBar from '@/components/NavBar';

import { useEffect, useState } from 'react';
import FlipCard from './card';
import { AnimatePresence } from 'framer-motion';


export type CardState = "left" | "right" | "none" | "leftChosen" | "rightChosen" | "second" | "third";

let pauseMouseAnimation = false;

const LINES = 3 as const;

const data = [{ id: 1, title: "Are you question one?" }, { id: 2, title: "Are you question two?" }, { id: 3, title: "Have you ever asked question three?" }];

export default function Home() {

  const [mousePosition, setMousePosition] = useState<CardState>("none");
  const [cardData, setCardData] = useState(data);
  const [width, setWidth] = useState(0);

  useEffect(() => {
    setWidth(window.innerWidth)
  }, [])

  useEffect(() => {
    const onMouseMove = (e: MouseEvent) => {
      if (pauseMouseAnimation) return;

      const positionX = 2 * (e.clientX / window.innerWidth - 0.5);

      if (positionX < -0.3) {
        setMousePosition("left");
      } else if (positionX > 0.3) {
        setMousePosition("right");
      } else {
        setMousePosition("none");
      }
    };

    const onMouseClick = (e: MouseEvent) => {
      if (pauseMouseAnimation) return;

      pauseMouseAnimation = true;

      if (mousePosition == "left") {
        setMousePosition("leftChosen");
      } else if (mousePosition == "right") {
        setMousePosition("rightChosen");
      }

      setTimeout(() => {
        setCardData((prev) => {
          const newData = [...prev];
          newData.shift();
          newData.push({
            id: newData[newData.length - 1].id + 1,
            title: "This is an autogenerated question #" + (newData[newData.length - 1].id + 1) + "?"
          })
          return newData;
        });

        setMousePosition("none");
        pauseMouseAnimation = false;
      }, 500);
    }

    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('click', onMouseClick);
    return () => {
      window.removeEventListener('mousemove', onMouseMove);
      window.removeEventListener('click', onMouseClick);
    };
  }, [mousePosition]);

  return (
    <div className="flex h-screen flex-col items-center justify-between bg-[#F1EFED] px-8">
      <NavBar />
      <div className="flex flex-grow flex-col items-center justify-center">
        <div className='relative flex h-1/2 w-full items-center justify-center' style={{
          perspective: "1000px",
        }}>

          <AnimatePresence initial={false}>
            {
              [...cardData].reverse().map((card, i) => (
                <FlipCard width={width} key={`card-${card.id}`} state={i == 2 ? mousePosition : i == 1 ? "second" : "third"}>
                  <div className='mb-8 mt-auto w-full px-10 text-xl font-medium'>
                    {card.title}
                  </div>

                  {/* {
                  Array(LINES - 1).fill(null).map((_, i) => (<>
                    <span className='absolute z-[-1] w-full border-t' key={`${2 * i}-${card.id}`} style={{
                      top: ((i + 1) / (LINES) * 100) + "%"
                    }} />
                    <span className='absolute z-[-1] h-full border-l' key={`${2 * i + 1}-${card.id}`} style={{
                      left: ((i + 1) / (LINES) * 100) + "%"
                    }} />
                  </>))
                } */}
                </FlipCard>
              ))
            }
          </AnimatePresence>
        </div>

      </div>
    </div>
  );
}
